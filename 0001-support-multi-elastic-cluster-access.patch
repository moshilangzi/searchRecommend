From e9d09ba6c5aca012bd7ab6efae815b047a0b1490 Mon Sep 17 00:00:00 2001
From: zhaoyufei <zhao-0244@qq.com>
Date: Sun, 11 Dec 2016 08:17:59 +0800
Subject: [PATCH] support multi elastic cluster access

---
 .../sr/common/elasticsearch/EsQueryService.java    | 67 ++++++++++++++++++----
 .../com/comm/sr/common/entity/CommonQuery.java     | 33 +++++++++++
 2 files changed, 89 insertions(+), 11 deletions(-)

diff --git a/src/main/java/com/comm/sr/common/elasticsearch/EsQueryService.java b/src/main/java/com/comm/sr/common/elasticsearch/EsQueryService.java
index 7d35e72..cee74a5 100644
--- a/src/main/java/com/comm/sr/common/elasticsearch/EsQueryService.java
+++ b/src/main/java/com/comm/sr/common/elasticsearch/EsQueryService.java
@@ -5,11 +5,12 @@
  */
 package com.comm.sr.common.elasticsearch;
 
-
 import com.comm.sr.common.core.AbstractQueryService;
 import com.comm.sr.common.entity.EsCommonQuery;
 import com.comm.sr.service.cache.CacheService;
 import com.google.common.collect.Lists;
+import com.google.common.collect.Maps;
+import com.google.common.collect.Sets;
 import org.elasticsearch.action.search.SearchResponse;
 import org.elasticsearch.client.transport.TransportClient;
 import org.elasticsearch.common.settings.Settings;
@@ -20,6 +21,7 @@ import java.net.InetAddress;
 import java.util.List;
 import java.util.Map;
 import java.util.Properties;
+import java.util.Set;
 
 /**
  *
@@ -28,30 +30,71 @@ import java.util.Properties;
 public class EsQueryService extends AbstractQueryService<EsCommonQuery> {
 
     private Properties settings=null;
-    private TransportClient client=null;
+    protected final Map<String,TransportClient> clientMap= Maps.newHashMap();
+
+
+
+
 
 
     public EsQueryService(Properties settings,CacheService<String,String> cacheService) {
         super(cacheService,settings);
+        try{
+
+
+            Set<String> properyNames=settings.stringPropertyNames();
+            Set<String> esClusterIdentitys= Sets.newHashSet();
+            for(String propertyName:properyNames){
+                if(propertyName.startsWith("elastic")){
+                    esClusterIdentitys.add(propertyName.split(".")[1]);
+
+
+                }
+
+            }
 
+            for(String identity:esClusterIdentitys){
+                String hosts=null;
+                String clusterName=null;
+                for(String propertyName:properyNames){
+                    if(propertyName.startsWith("elastic."+identity+".clusterName")){
+                        clusterName=settings.getProperty(propertyName);
+                    }
+                    if(propertyName.startsWith("elastic."+identity+".hosts")){
+                        hosts=settings.getProperty(propertyName);
+                    }
 
-            String hosts=settings.getProperty("elasticSearchHosts");
-         String clusterName=settings.getProperty("elasticSearchClusterName");
-        Settings esSettings = Settings.settingsBuilder().put("cluster.name", clusterName).build();
-            client=TransportClient.builder().settings(esSettings).build();
+                }
+                Settings esSettings = Settings.settingsBuilder().put("cluster.name", clusterName).build();
+
+                TransportClient client=TransportClient.builder().settings(esSettings).build();
+
+                for(String host:hosts.split(";")){
 
-            for(String host:hosts.split(";")){
+                    try {
+                        client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(host.split(":")[0]), Integer.parseInt(host.split(":")[1])));
+                    } catch (Exception e) {
+                        logger.error("error to get elasticsearch client!");
+                    }
 
-                try {
-                    client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(host.split(":")[0]), Integer.parseInt(host.split(":")[1])));
-                } catch (Exception e) {
-                    logger.error("error to get elasticsearch client!");
                 }
+                clientMap.put(identity,client);
 
             }
 
 
 
+        }catch (Exception e){
+            throw  new RuntimeException("can not connect to elastic cluster! program will exit!");
+        }
+
+
+
+
+
+
+
+
 
     }
 
@@ -65,6 +108,8 @@ public class EsQueryService extends AbstractQueryService<EsCommonQuery> {
 
     @Override
     public List<Map<String, Object>> query(EsCommonQuery baiheQuery) throws Exception {
+        String clusteridentity=baiheQuery.getClusterIdentity();
+        TransportClient client=clientMap.get(clusteridentity);
         List<Map<String, Object>> results = Lists.newArrayList();
         EsQueryGenerator.EsQueryWrapper  esQueryWrapper=new EsQueryGenerator().generateFinalQuery(baiheQuery);
         SearchResponse searchResponse=client.prepareSearch().setSource(esQueryWrapper.getSearchSourceBuilder().toString()).setIndices(esQueryWrapper.getIndexName())
diff --git a/src/main/java/com/comm/sr/common/entity/CommonQuery.java b/src/main/java/com/comm/sr/common/entity/CommonQuery.java
index d8d0950..9ad9e19 100644
--- a/src/main/java/com/comm/sr/common/entity/CommonQuery.java
+++ b/src/main/java/com/comm/sr/common/entity/CommonQuery.java
@@ -15,6 +15,7 @@ import java.util.List;
  * @author jasstion
  */
 public class CommonQuery extends AbstractQuery {
+    protected String clusterIdentity=null;
 
     protected String queryStr=null;
 
@@ -58,6 +59,38 @@ public class CommonQuery extends AbstractQuery {
                 "} " + super.toString();
     }
 
+    public String getClusterIdentity() {
+        return clusterIdentity;
+    }
+
+    public void setClusterIdentity(String clusterIdentity) {
+        this.clusterIdentity = clusterIdentity;
+    }
+
+    @Override public boolean equals(Object o) {
+        if (this == o) return true;
+        if (!(o instanceof CommonQuery)) return false;
+
+        CommonQuery that = (CommonQuery) o;
+
+        if (getClusterIdentity() != null ?
+            !getClusterIdentity().equals(that.getClusterIdentity()) :
+            that.getClusterIdentity() != null) return false;
+        if (getQueryStr() != null ?
+            !getQueryStr().equals(that.getQueryStr()) :
+            that.getQueryStr() != null) return false;
+        if (getSubQuery() != null ?
+            !getSubQuery().equals(that.getSubQuery()) :
+            that.getSubQuery() != null) return false;
+        if (getLocationPoint() != null ?
+            !getLocationPoint().equals(that.getLocationPoint()) :
+            that.getLocationPoint() != null) return false;
+        return !(getDistance() != null ?
+            !getDistance().equals(that.getDistance()) :
+            that.getDistance() != null);
+
+    }
+
     @Override
     public int hashCode() {
         int hash = 3;
-- 
2.9.3 (Apple Git-75)

