package com.comm.sr.service.vcg;

import com.comm.sr.common.component.AbstractComponent;
import com.comm.sr.common.core.AbstractQueryService;
import com.comm.sr.common.entity.EsCommonQuery;
import com.comm.sr.common.entity.QueryItem;
import com.comm.sr.common.entity.SortItem;
import com.comm.sr.common.entity.SubQuery;
import com.comm.sr.common.utils.GsonHelper;
import com.comm.sr.service.ServiceUtils;
import com.google.common.collect.Lists;
import com.google.common.collect.Maps;
import com.yufei.utils.ExceptionUtil;
import org.sql2o.Connection;
import org.sql2o.Sql2o;

import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.function.Consumer;

/**
 * Created by jasstion on 15/03/2017.
 */
public class VcgImageSearchService extends AbstractComponent{
  protected AbstractQueryService queryService=null;
  public VcgImageSearchService(Properties settings,AbstractQueryService queryService) {
    super(settings);
    this.queryService=queryService;
  }
public static class ImageSearchParams {
  private String distanceType=null;
  private String cNNFeatures=null;
  private String imageId=null;
  private int matchedTopNum=20;
  private int pageNum=1;
  private int fetchSize=100;


  @Override public String toString() {
    return "ImageSearchParams{" +
        "cNNFeatures='" + cNNFeatures + '\'' +
        ", distanceType='" + distanceType + '\'' +
        ", matchedTopNum=" + matchedTopNum +
        '}';
  }

  public String getImageId() {
    return imageId;
  }

  public void setImageId(String imageId) {
    this.imageId = imageId;
  }

  public String getcNNFeatures() {
    return cNNFeatures;
  }

  public int getFetchSize() {
    return fetchSize;
  }

  public void setFetchSize(int fetchSize) {
    this.fetchSize = fetchSize;
  }

  public int getPageNum() {
    return pageNum;
  }

  public void setPageNum(int pageNum) {
    this.pageNum = pageNum;
  }

  public void setcNNFeatures(String cNNFeatures) {
    this.cNNFeatures = cNNFeatures;
  }

  public String getDistanceType() {
    return distanceType;
  }

  public void setDistanceType(String distanceType) {
    this.distanceType = distanceType;
  }

  public int getMatchedTopNum() {
    return matchedTopNum;
  }

  public void setMatchedTopNum(int matchedTopNum) {
    this.matchedTopNum = matchedTopNum;
  }
}
   public Map<String, Object> search(String searchParamsStr) throws Exception {
     Map<String,Object> finalResults= Maps.newHashMap();

    ImageSearchParams searchParams=(ImageSearchParams) GsonHelper
        .jsonToObj(searchParamsStr, ImageSearchParams.class);
     EsCommonQuery query=null;

     if(searchParams.getImageId()==null){
       //list images
       int pageNumber=searchParams.getPageNum();
       int pageSize=searchParams.getFetchSize();
       String indexName="vcg_image";
       String typeName="image";
       query= new EsCommonQuery(pageNumber,pageSize, Lists.newArrayList(new SortItem("imageId","desc")), Lists.newArrayList("imageId"), indexName, typeName);
       query.setClusterIdentity("vcgImage");
     }
     else{
       int pageNumber=1;
       int pageSize=searchParams.getMatchedTopNum();
       String indexName="vcg_image";
       String typeName="image";
       query= new EsCommonQuery(pageNumber,pageSize, Lists.newArrayList(new SortItem("_score","asc")), Lists.newArrayList("imageId"), indexName, typeName);
       query.setClusterIdentity("vcgImage");
       Map<String,Object> scriptParams= Maps.newHashMap();
       String cNNFeatures=null;
       //get cNNFeatures from index by imageId
      cNNFeatures=getCNNFeaturesByImageId(searchParams.getImageId());
       scriptParams.put("vecStr",cNNFeatures);
       scriptParams.put("vecStrFieldName","cNNFeatures");
       scriptParams.put("distanceType",searchParams.getDistanceType());
       query.setScriptLangType("native");
       query.setScriptParams(scriptParams);
       query.setScript("vectors_distance");
     }

     //EsQueryGenerator.EsQueryWrapper esQueryWrapper= new EsQueryGenerator().generateFinalQuery(query);

     List<Map<String,Object>> results= queryService.processQuery(query);
     //populate image url
     final List<String> imageIds=Lists.newArrayList();
     results.forEach(new Consumer<Map<String, Object>>() {
       @Override public void accept(Map<String, Object> stringObjectMap) {
         imageIds.add((String)stringObjectMap.get("imageId"));
       }
     });
     Map<String,String> idUrlMap=getImageUrlInfo(imageIds);

     results.forEach(new Consumer<Map<String, Object>>() {
       @Override public void accept(Map<String, Object> stringObjectMap) {
         stringObjectMap.put("url",imageDomain+idUrlMap.get(stringObjectMap.get("imageId")));
       }
     });



     finalResults.put("result",results);


    return finalResults;
  }

  private String getCNNFeaturesByImageId(String imageId) throws Exception{
    String indexName="vcg_image";
    String typeName="image";
    String cNNFeatures=null;
    EsCommonQuery query=null;
    query= new EsCommonQuery(1,1,null, Lists.newArrayList("cNNFeatures"), indexName, typeName);
    query.setClusterIdentity("vcgImage");
    SubQuery subQuery=new SubQuery("AND",new QueryItem("imageId",Lists.newArrayList(imageId)));
    query.setSubQuery(subQuery);
    List<Map<String,Object>> results= queryService.processQuery(query);
    cNNFeatures=(String)results.get(0).get("cNNFeatures");




    return cNNFeatures;
  }
  final  String imageDomain="http://bj-feiyuantu.oss-cn-beijing.aliyuncs.com/";
  public  Map<String,String> getImageUrlInfo(List<String> imageIds) throws Exception{
    Map<String,String> results=Maps.newHashMap();
    String mysqlUrl=settings.getProperty("mysqlUrl");
    String mysqlUserName=settings.getProperty("mysqlUserName");
    String mysqlPasswd=settings.getProperty("mysqlPasswd");



    final Sql2o sql2o =
        new Sql2o(mysqlUrl,mysqlUserName,mysqlPasswd);
    Connection con = sql2o.open();
    String tableName = "resource";
    StringBuffer clause=new StringBuffer();
    clause.append("(").append(org.apache.commons.lang3.StringUtils.join(imageIds,",")).append(")");

    String sql="select oss_id5,id from resource where id in "+clause.toString();
    logger.debug(sql);
    List<Map<String, Object>>  re=con.createQuery(sql).executeAndFetchTable().asList();
    for (Map<String, Object> map:re){
      try {
        if (!map.containsKey("oss_id5") || !map.containsKey("id")) {
          continue;
        }
        results.put(map.get("id").toString(), map.get("oss_id5").toString());
      }catch (Exception e){
        logger.info(ExceptionUtil.getExceptionDetailsMessage(e));
        logger.debug(map.toString());
      }
    }
    con.close();








    return results;

  }

  public static void main(String[] args) throws Exception {

//    AbstractQueryService queryService=ServiceUtils.getQueryService();
//    String indexName="vcg_image";
//    String typeName="image";
//    int pageNumber=1;
//    int pageSize=20;
//
//
//    EsCommonQuery query = new EsCommonQuery(pageNumber,pageSize, Lists.newArrayList(new SortItem("_score","asc")), Lists.newArrayList("imageId"), indexName, typeName);
//    query.setClusterIdentity("vcgImage");
//    Map<String,Object> scriptParams= Maps.newHashMap();
//    scriptParams.put("vecStr","0.861843,0.0501282,0.0230174,0.31559,0.558148,0.0417566,0.637796,0.446353,0.472662,0.135962,0.471548,0.85809,0.0193137,0.240001,0.128319,0.201755,0.535372,0.444987,0.0511621,0.213289,0.0984105,0.219994,0.614889,0.211672,0.0612657,0.540796,0.417201,0.127961,0.244234,0.0916717,0.28961,0.934867,0.0417946,0.65682,0.35461,0.0698856,0.424101,1.60084,0.0182688,0.335812,0.0616422,0.0492882,0.284311,0.53107,0.205961,0.292776,0.109754,0.110599,0.207916,0.188774,0.0430436,0.266573,0.537092,0.140295,0.371834,0.536334,0.676308,0.0248954,0.202005,0.686543,0.279334,0.638491,0.209941,0.410552,0.334189,0.0549273,0.375369,0.761711,0.589243,0.534326,0.67209,0.0926709,0.323228,0.0962432,0.294089,0.732956,0.290485,0.09695,0.218067,0.66126,0.148426,0.59298,0.0881107,1.04143,0.366153,0.134849,0.163326,0.276957,0.0248152,0.62026,0.176253,0.16316,0.154999,0.201541,0.38255,0.122719,0.20805,0.148191,0.445558,0.354084,0.229149,0.0788706,0.0580411,0.132705,0.0841508,0.658266,0.138703,0.33631,0.463987,0.182546,0.190092,0.154758,0.614474,0.528978,0.185886,0.132943,0.439586,0.0875334,0.722615,0.26538,0.357563,0.269554,0.198738,0.10856,0.137122,0.119209,0.0350248,0.0698553,0.645356,1.04464,0.255259,0.356294,0.115938,0.0667978,0.256102,0.103661,0.135182,0.0610292,0.117542,0.150862,0.208234,0.225915,0.177547,0.0320673,0.150155,0.136368,0.908459,0.310878,1.22916,0.205629,0.231006,0.0700176,0.16757,0.325096,0.248977,0.165625,0.493694,0.520767,0.147612,0.0524576,0.12517,0.204964,0.233236,0.147224,0.157689,0.121878,0.512217,0.845068,0.0481387,0.437877,0.198804,0.0203959,0.22771,0.038473,0.362474,0.303299,0.0649974,0.0513411,0.0350082,1.05197,0.074113,0.373109,0.398111,0.440264,0.501537,0.0679793,0.232452,0.0376081,0.16437,0.494192,0.106269,0.0981541,0.162181,1.92792,0.240024,0.0635985,0.570898,0.701385,0.897399,0.388786,0.15901,0.27633,0.203855,0.498236,0.342644,0.240201,0.615279,0.083353,0.307046,0.0186124,0.157981,0.713938,0.577188,0.291883,0.202194,0.294848,0.0321173,0.057595,0.146658,0.465431,0.0898372,0.260716,0.0918634,0.160371,0.0636766,0.0620283,0.174294,0.0442967,0.0287053,0.433117,0.266925,0.187819,0.0661387,0.00260632,0.260706,0.614594,0.511405,0.179117,1.23721,0.335435,0.240325,0.072114,0.332432,0.037538,0.0173772,0.947874,0.0455779,0.251131,0.241049,0.546342,0.0346696,0.754636,0.087601,0.0696682,0.0736652,0.366744,0.269038,1.27249,0.344063,0.20725,0.157128,0.121047,0.244244,0.0501962,0.245233,0.145654,0.215267,1.15546,0.319715,0.863149,0.0467396,0.336889,0.111816,0.484105,0.196179,0.191793,0.0224085,0.289267,0.298838,0.129276,0.305224,0.592475,0.0203181,0.426377,0.296165,0.336953,0.37354,0.698579,0.000444365,0.277611,0.149839,1.17364,0.621194,0.564129,0.914185,0.0406093,0.0822219,0.167231,0.300274,0.239803,0.119242,0.0550857,0.580699,0.250629,0.358478,0.599477,0.465264,0.140708,1.03918,0.18904,0.590196,0.297003,0.508224,0.400373,0.275888,0.253425,0.189664,0.850377,0.16064,0.164051,0.0195422,0.27047,0.148996,0.119008,0.250346,0.104827,0.0903693,0.456469,1.09099,0.146909,0.277234,0.479029,0.0926264,0.0797222,0.192115,0.0315991,0.0657777,0.133162,0.133087,0.800331,0.149347,0.264113,0.457037,0.370219,0.156316,0.148371,0.00915788,0.0434563,0.343581,0.0627355,0.0,0.0532762,0.000567827,0.307643,0.132681,0.399607,0.248792,0.128613,0.0839064,0.0298439,0.200051,0.0425103,0.172486,0.258587,0.00741151,0.478377,0.0807283,0.00419916,0.669115,0.151147,0.0511875,0.224653,1.00936,0.698649,0.280344,0.096869,0.0202173,0.0966826,0.129996,0.356186,0.00383457,0.0835369,0.0829106,0.0807602,0.656205,0.1538,0.290755,0.229427,0.0778942,0.236201,0.601161,0.0912586,0.0808153,0.00842899,0.409894,0.119344,0.00615711,0.13719,0.57751,0.202726,0.23801,0.293527,0.0988587,0.0227649,1.82718,0.140755,0.166445,0.121065,0.0393455,1.09076,0.190263,0.460598,0.287859,0.0465999,0.00179315,0.248625,0.0380212,0.527862,0.313888,0.356635,0.0147742,0.0909691,0.216688,0.0753357,0.349956,0.150559,0.383517,0.504156,0.173725,0.629268,1.49552,0.408884,0.127286,1.78153,0.15049,0.223664,0.135469,0.0841807,0.250202,0.466168,0.695787,0.28331,0.0288069,0.466295,0.414595,0.0833918,0.260575,0.043414,0.00344406,0.362787,0.257956,0.06807,0.0,0.099581,0.104883,0.597747,0.0440549,0.0215428,0.0435281,0.259364,0.291364,0.0891494,0.108819,0.245768,0.0173913,0.493106,1.12165,0.513659,0.00424476,0.109551,0.197266,0.310222,0.0845168,0.400799,0.00886541,0.436917,0.520804,0.384109,0.162636,0.0185012,0.0899322,0.118867,0.197853,0.603194,0.724054,0.0821571,0.134723,0.400094,0.136689,0.211021,0.1511,0.0388782,0.643719,0.624287,0.0114652,0.0792996,0.0670145,0.0518445,0.439725,0.45412,0.32072,0.00810981,0.0,0.0862362,0.0347002,0.0224417,0.101766,0.0978056,0.416422,0.166492,0.438583,0.0737133,0.40871,0.0585079,1.0222,0.0728112,0.655843,0.119086,0.0140639,0.433324,0.515162,0.152407,0.0295921,0.0525142,0.0344537,0.393147,1.11366,0.480551,0.437489,0.682912,0.0442979,0.153798,0.408866,0.398952,0.86378,0.157156,0.160088,0.0281205,0.835306,0.085393,0.0440454,0.0545139,0.08787,0.552933,0.0337791,0.202676,0.498711,0.0,0.314156,0.0306395,0.114876,0.00918351,0.116563,0.0,0.0323929,0.341958,0.564898,0.0712178,0.100398,0.0195548,0.631547,0.0690953,0.181357,0.0565345,0.109497,0.0829184,0.101071,0.0736613,0.43658,0.358096,0.32745,0.695488,0.0,0.0732443,0.000776905,0.106563,0.197546,0.0730742,0.07089,0.00461666,0.372728,0.147616,0.469429,0.0454069,0.0464038,0.0244109,0.283705,0.18872,0.20321,0.0127856,0.520395,0.992843,0.396914,0.340854,0.165194,0.21878,0.117159,0.274478,0.204666,1.04219,0.122598,0.184348,0.219057,0.0964675,0.15715,0.0671877,0.0414682,0.776448,0.119788,0.132673,1.06103,0.207779,0.345571,0.380136,0.149841,0.0424857,0.180486,0.114623,0.0810409,0.175595,0.754689,0.166241,0.0631303,0.190511,0.414263,0.0721654,0.010289,0.287574,0.372808,0.0449067,0.0208763,0.570646,0.228549,0.345388,0.334518,0.248554,0.454203,0.036933,0.666819,0.113586,0.349118,0.153644,0.0700395,0.0967214,0.0850754,0.544364,0.561201,0.791569,0.0919192,0.567954,0.0131393,0.353571,0.284656,0.324372,0.159235,0.837198,0.173367,0.258648,0.337289,0.104574,0.23278,0.0731031,0.763415,0.0727554,0.165971,0.109662,0.132809,0.133003,0.225954,0.110829,0.403416,0.0619063,0.315582,0.287645,0.00816472,0.223801,0.131001,0.560897,0.0640643,0.25043,0.49938,0.521842,0.244907,0.181238,0.490653,0.217214,0.206691,0.189827,0.36278,0.00583233,0.3664,0.183069,0.190387,0.0333805,0.240895,0.300413,0.0861283,0.448009,0.243255,0.216186,0.1087,0.0,0.289999,0.200678,0.355311,0.0874617,0.0808086,0.732551,0.447893,0.0698828,0.243532,0.12861,0.124051,0.0652226,0.269726,0.690894,0.479015,0.11729,0.22148,0.570973,0.155796,0.702798,0.53627,0.0303928,0.216904,0.365066,0.156804,0.158279,0.0601924,0.0759884,0.121574,0.0124972,0.0187282,0.205156,0.589386,0.106848,0.242341,0.0408586,0.0327856,0.929686,0.0465119,0.0160817,0.183361,0.261739,0.11284,0.023346,0.392056,0.99362,0.110195,0.420348,0.767142,0.186452,0.195138,0.123665,0.017481,1.26388,0.130497,0.969499,0.418642,0.0285535,0.107276,0.405191,0.119903,0.19208,0.170543,0.506377,0.0488438,0.118665,0.307964,0.111036,0.177486,0.197038,0.194326,0.19039,0.627503,0.243991,0.105353,0.164255,0.24384,0.131601,0.00207234,0.632479,0.118112,0.0707782,0.769044,0.161501,0.220632,0.451899,0.135584,0.460145,0.0104895,0.144687,0.13921,0.272446,0.0188087,0.244189,0.14447,0.0784059,0.901379,0.426701,0.239073,0.263257,0.173019,0.00351111,0.341669,0.0103029,0.039922,0.0332896,0.0365881,0.757747,0.593828,0.249879,0.239464,0.0466266,0.183548,0.936787,0.298977,0.409031,0.0502625,0.242517,0.435314,0.0111307,0.155371,0.181375,0.00812501,0.00519807,0.0378168,0.0606751,0.166477,0.0718771,0.0,0.441292,0.290913,0.517687,0.0107151,0.0694397,0.117065,0.259432,0.0619462,0.595334,0.138308,1.12117,0.369461,0.0910477,0.122586,0.10867,0.307155,0.0213028,0.265184,0.0202185,0.108954,0.420592,0.15639,0.0729353,0.0732908,0.0218484,0.259674,0.749529,0.198606,0.267813,0.80521,0.32608,0.185139,0.314861,0.855983,0.0399037,0.313474,0.359713,0.0868539,0.040681,0.0530569,0.00575001,0.662431,0.427812,0.147491,2.73182,0.0523843,0.185319,0.085546,0.88024,1.02968,0.452345,0.856753,0.0306139,0.0765528,0.387526,0.302095,0.460707,0.0683896,0.0252364,0.560286,0.331781,0.486379,0.686491,0.0304952,0.031314,0.23148,0.00815178,0.257795,0.054411,0.22641,0.00556228,0.450346,0.0899192,0.584373,0.236811,0.0413712,0.319073,0.38014,0.295718,0.0813803,0.0,0.441939,0.153785,0.129935,0.0126553,0.401013,0.0340427,0.133465,0.113312,0.175682,1.13499,0.479352,0.173949,0.120617,0.610257,0.0143954,0.273135,0.208283,1.19681,0.327807,0.1553,0.0652794,0.0852714,0.150119,0.445918,0.553874,0.204981,0.145809,0.142136,0.0467182,0.598817,0.0661492,0.723139,0.465833,1.35256,0.0148071,0.166148,0.272546,0.129987,0.0607309,0.14902,0.533141,0.151902,0.0560134,0.280695,0.14685,0.101367,0.31958,0.0,0.0425109,0.188501,0.00744705,0.429364,0.142087,0.177702,0.315317,0.752405,0.0230576,1.25458,0.088145,0.00582392,0.0220635,0.630046,0.0,0.0054088,0.082036,0.219769,0.181848,0.0349358,0.219492,0.250994,0.00477231,0.100815,0.324504,0.0626776,0.106424,0.255412,0.229825,0.0340534,0.284011,0.0175004,0.553133,0.370397,0.622346,0.12387,0.318752,1.1106,0.622149,0.0767506,0.350828,0.134283,0.0461969,0.726876,0.025505,0.26742,0.237873,0.587235,0.0577057,0.292072,0.348618,0.620779,0.529294,0.198319,0.250234,0.487623,0.22797,0.0886454,0.309581,0.0365414,0.870164,0.00962456,0.266095,0.771832,0.00877133,0.270381,0.325401,0.104715,0.112138,0.0795194,0.157587,0.146083,0.0230738,0.0858953,0.0470928,0.413008,0.217055,0.584726,0.435957,0.179868,0.125358,0.137694,0.0579815,0.20849,0.0,0.0912116,0.794176,0.000443026,0.230064,0.0091674,0.101275,0.0526757,0.347306,0.292082,0.168683,0.192107,0.0464251,0.65214,0.0070409,0.665093,0.410962,0.669709,0.215132,0.0424193,0.0481222,0.192763,0.255853,0.085383,0.395547,0.0480107,0.820178,0.392333,0.223742,0.0994508,0.283563,0.785437,0.094358,0.200191,0.496807,0.134411,0.0558574,0.4004,0.147565,0.214188,0.081853,0.0366044,0.096055,0.330646,0.0173362,0.0195012,0.871327,0.0444163,0.26864,0.215199,0.294027,0.0635858,0.0304067,0.274979,0.0724675,0.186106,0.535537,0.759492,0.213319,0.0269567,0.0999243,0.568767,0.0510194,0.301683,0.0710024,0.0609781,0.267088,0.160466,0.0256883,0.0904385,0.0142063,0.0209425,0.98845,0.143424,0.00838517,0.661733,0.0663206,0.428895,0.000888645,0.64434,0.472604,0.0598567,0.0301714,0.589934,0.943264,0.0151968,0.4787,0.353814,0.00586439,0.82827,0.0885664,0.663514,0.415518,1.20265,0.163404,0.45805,0.412268,0.182605,0.0215042,0.00578528,0.5009,0.0612807,1.30189,0.545806,0.0766621,0.168772,1.6741,0.112647,0.569972,0.120602,0.00222769,0.214515,0.163518,0.38153,0.0955237,0.213137,0.0122413,0.395394,0.302651,0.000595636,0.0334973,0.447358,0.251721,0.119761,0.206176,0.219668,0.504993,0.100455,0.146152,0.182714,0.354489,0.116491,0.0488144,0.0550081,0.487103,0.0543008,0.0505531,0.0817404,0.134573,0.000141509,0.198256,0.475194,0.217915,0.118133,0.891946,0.55779,0.383949,0.271754,0.241522,0.103765,0.099008,0.149522,0.0130156,0.191193,0.43877,0.0105666,0.0345046,0.139867,0.163536,0.140535,0.0783743,0.257699,0.345197,0.0216252,0.156585,0.00227001,0.160573,0.380694,0.274662,0.18816,0.0970464,0.153571,0.00504079,0.0,0.0696989,0.0,0.0850758,0.0652285,0.0119478,0.892628,0.334017,0.265019,0.122637,0.161171,0.248768,0.345672,0.955895,0.165762,0.0827044,0.12986,0.0,0.186512,0.477345,0.977099,0.0173384,0.118468,0.341272,0.0220664,0.924096,0.0717433,1.19823,0.149086,0.0110595,0.187892,0.0234665,0.014896,0.159373,0.446643,0.451572,0.0,0.473445,0.0171196,0.607536,0.205065,0.923026,0.0548245,0.212986,0.0813769,0.00131174,0.00975893,0.123269,0.278998,0.594969,0.013892,0.0388543,0.426752,0.194207,0.0037245,0.00537933,0.0779553,0.0831459,0.166899,0.487382,0.0857498,0.23206,0.0,0.0,0.286138,0.0038415,0.561086,0.0602791,0.141732,0.107439,0.0111692,0.0152565,0.976055,0.0163229,0.137349,0.0357857,0.0590467,1.51492,1.35307,0.354566,0.198456,0.161018,0.0314327,0.0415836,0.0867626,0.004169,0.192699,0.104857,0.300042,0.16165,0.14852,0.127145,0.0126545,0.00360418,0.430964,0.109368,0.0103903,0.208973,0.410081,0.416089,0.787037,0.207058,0.269708,0.0971687,0.247436,0.242773,0.069713,0.00536976,0.241585,0.179565,0.348669,0.385511,0.0,0.329171,0.317094,0.0514509,0.0190129,0.0316661,0.0252094,0.000110571,0.00327871,0.13873,0.0317128,0.287645,0.737571,0.0232316,0.710432,0.154821,0.0640264,0.9101,1.13871,0.00205648,0.0868996,0.0313697,0.00880593,0.267912,0.145562,0.0971609,0.0,0.0645332,0.214821,0.140241,0.975166,0.0680651,0.247188,0.134091,0.00977614,0.0159842,0.0578313,0.18367,0.101353,0.165473,0.457619,0.0734545,0.0,0.0197543,0.814359,0.426656,0.456637,0.134745,0.362584,0.301048,0.00299192,0.796647,0.658207,0.0277642,0.00200175,0.0110937,0.239864,0.346976,0.0696288,0.580896,0.376127,0.069668,0.298126,0.372469,0.0425257,0.15211,0.0224789,1.07303,0.171203,0.133531,0.153162,1.2129,0.00916422,0.340807,0.078428,0.2105,0.0409836,0.0267533,0.167061,0.0528596,0.481103,0.247336,0.328192,0.13995,0.0101312,0.248854,0.0166473,0.209718,0.340464,0.0107668,0.0981251,0.0293406,0.600875,0.000731743,0.000267677,0.0789416,0.0817068,0.0828379,0.0465199,0.00492587,0.0455337,0.0587102,0.102356,0.0805575,0.238712,0.219504,0.104069,0.0141436,0.171391,0.0382045,0.0696383,0.277025,0.250788,0.0650033,0.00566632,0.335106,0.0244019,0.182974,0.200764,0.180639,0.132488,0.0213867,0.355564,0.0876477,0.122089,0.0393124,0.0547711,0.592029,0.987015,0.126356,0.0465371,0.340364,0.232095,0.047831,0.420168,0.183702,0.00161287,0.581753,0.123179,0.12236,0.029699,0.154429,0.239023,0.00525156,0.0075834,0.164663,0.00249824,0.454296,0.52052,0.189844,0.0325731,0.285312,0.28457,1.03508,0.0600518,0.0988823,0.219335,0.0419691,0.513277,0.411529,0.000813582,0.0896854,0.0975173,0.00780996,0.0260448,0.0153565,0.333854,0.157433,0.0627355,0.299182,0.363777,0.854511,0.115946,0.0801319,0.000728221,0.0,0.785357,0.294412,0.153652,0.0624538,0.0272848,0.451101,0.0939767,0.214081,0.0,0.179165,0.0521672,0.17429,0.946324,0.376361,0.121687,0.291531,0.352569,0.0367151,0.603677,0.22814,0.0160807,0.108091,0.171035,0.142893,0.728226,0.0321225,0.176815,0.0931184,0.618181,0.315931,0.342039,0.523892,0.134571,0.38452,0.205571,0.177634,0.114622,0.376634,0.0436747,0.016896,0.487929,0.0747499,0.0440968,0.203137,0.0613336,0.251323,0.0133133,0.0100805,0.326162,0.0790897,0.1053,0.163185,0.359183,0.0445745,1.05575,1.46786,0.0164489,0.138552,0.259282,0.348124,0.100845,0.339147,0.0155415,0.0512565,0.0,0.26145,0.303874,0.17051,0.0359929,0.0755882,0.914253,0.171884,0.0208493,0.239014,0.253142,0.0190452,0.404846,0.0186815,0.0970345,0.366716,0.036378,0.0157264,0.0304364,0.0388653,0.0106965,0.375038,0.102742,0.574927,0.0208198,0.139519,0.000116351,0.262938,0.840933,0.43111,0.54086,0.696321,0.0552777,0.0828537,1.01553,0.318745,0.471075,0.272125,1.05423,0.424651,0.415882,0.18809,0.0523717,0.0507489,0.00744074,0.0855738,0.909007,0.616776,0.222456,0.0109247,0.503103,0.950023,0.244357,0.232998,0.0326229,0.267664,0.124915,0.0341154,0.205206,0.0,0.0511637,0.0348988,0.0141182,0.949848,1.04884,0.0702153,0.0,0.185681,0.191764,0.390943,0.0367948,0.0142284,0.244562,0.0,0.243205,0.0700673,0.539804,0.00171192,0.0486175,0.0414978,0.302601,0.251197,0.445574,0.293579,0.0218821,0.0912192,0.0484378,0.704284,0.0213177,0.0579064,0.101728,0.0185363,0.0693984,0.0774859,0.17158,0.116515,0.0526779,0.374738,0.0335857,0.0751226,0.281393,0.323617,0.233404,0.35455,0.0553548,0.00225358,0.0135856,0.320087,0.0688837,0.73577,0.348223,0.026559,0.16854,0.305532,0.129711,0.191551,0.494288,0.152749,0.17007,0.0229432,0.126028,0.316633,0.138062,0.11975,0.650868,0.258182,0.0473371,0.413372,0.0871055,0.120039,0.157532,0.426892,0.573699,1.33781,0.675767,0.274262,0.425773,0.131376,0.214267,0.00996898,0.237064,0.0326754,0.0145936,0.00866503,0.14667,0.354724,0.965087,0.11551,0.357134,1.01369,0.513165,0.0981037,0.125182,0.0,0.271242,0.253176,0.0152873,0.167971,0.818634,0.0760188,0.0441304,0.132558,0.06864,0.446123,0.945548,0.470101,0.660483,0.0244234,0.417141,0.0652612,0.0416115,0.350414,0.242044,0.250127,0.492256,0.0179066,0.0104664,0.150088,0.198141,0.0198401,0.170652,0.232101,0.634964,0.107651,0.133114,0.120746,0.15442,0.169318,0.0119419,0.0426162,0.0816188,0.0302108,0.260727,0.279935,0.134443,0.0833903,0.570992,0.0511932,0.565901,0.011902,0.0954576,0.00554594,0.247183,0.168264,0.195907,0.11746,0.160072,0.0,0.266564,0.00821676,0.12804,0.0783124,0.102176,0.309916,0.281339,0.510647,0.063789,0.0478289,0.0123716,0.0116935,0.140164,0.564163,0.602055,0.60996,0.108333,0.450341,0.54326,0.200085,0.000667035,0.0313931,0.105941,0.139189,0.156675,0.325103,0.390431,0.779268,0.250218,0.124995,0.00193002,0.122617,0.0939613,0.0112978,0.384629,0.736708,0.0126581,0.00576401,0.0290696,1.20037,0.0704815,0.0921158,0.0667617,0.918206,0.26122,0.671303,0.364362,0.0404387,0.199112,0.111165,0.623896,0.339085,0.437823,0.0818201,0.0198185,0.683168,0.271808,0.134982,0.382943,0.532533,0.147456,0.185441,0.117984,0.0753702,0.683435,0.0818203,0.50386,0.0980933,0.0609991,0.0541919,0.0067916,0.207254,0.742208,0.476167,0.0296971,0.183901,0.0209756,0.084189,0.0316086,0.424155,0.487529,0.0593696,0.693591,0.937124,0.362211,0.486715,0.465134,0.990376,0.259284,0.257999,0.240411,0.0559834,0.888314,2.40695,0.325015,0.105802,0.738314,0.278566,0.0137285,0.621353,0.266326,0.718617,0.0,0.99903,0.344435,0.139979,0.0225327,0.485026,1.41865,0.952507,0.110045,0.0347131,0.450174,0.480665,0.63781,0.0924035,0.139308,0.907281,0.148627,0.318721,0.384145,0.712983,0.61028,0.0573636,0.133864,0.323526,0.398763,0.301255,0.502694,0.437948,0.00697376,0.351953,0.156321,0.637937,0.0557083,0.0414809,0.594993,0.881629,0.0295166,0.517637,1.45642,0.845053,0.239844,2.27403,0.413294,0.497596,0.646323,0.130307,0.572109,0.454436,0.360275,0.645887,0.347815,0.885878,0.159494,0.475505,0.0294909,0.0026852,0.0278713,0.0,0.192841,0.264421,0.00912669,0.57389,0.0231363,1.00142,0.285288,0.249549,0.526277,0.509396,0.663423,0.482217,0.295749,0.925037,0.535202,0.81671,0.521948,0.163123,0.372136,0.0672249,0.222851,0.196505,0.0367376,0.301359,0.215272,1.84721,0.292902,0.432811,0.107566,0.0853629,0.296602,0.346338,0.801722,0.0709226,0.136218,0.778572,0.00721008,0.628118,0.316298,0.421515,0.992053,0.632461,0.0121994,0.18369,0.491094,0.461473,0.224394,0.414086,0.466454,0.169498,0.618744,2.06684,0.440636,0.0350079,0.187685,0.454667,0.254863,0.380894,0.611919,0.861775,0.65573,1.64022,0.777457,0.027032,0.111335,0.454474,0.584962,0.232677,1.07336,0.601215,1.57765,0.383657,0.0896635,0.217359,0.206573,0.930014,0.540747,0.307042,0.543411,0.0342931,0.520635,0.0521758,0.391819,0.132459,0.0508753,1.27695,1.3732,0.490911,0.33439,0.433349,0.826633,0.320787,0.970241,0.553567,0.263438,0.0567404,0.024601,0.240542,1.50809,0.725856,0.0143649,0.0436913,0.340418,0.0346825,0.0519197,0.0718045,0.505376,0.195169,0.448014,0.834325,0.811811");
//    scriptParams.put("vecStrFieldName","cNNFeatures");
//    scriptParams.put("distanceType","chi2");
//    query.setScriptLangType("native");
//    query.setScriptParams(scriptParams);
//    query.setScript("vectors_distance");
//    EsQueryGenerator.EsQueryWrapper esQueryWrapper= new EsQueryGenerator().generateFinalQuery(query);
//
//    List<Map<String,Object>> results= queryService.processQuery(query);
//
//    results.forEach(new Consumer<Map<String, Object>>() {
//      @Override public void accept(Map<String, Object> stringObjectMap) {
//        System.out.print(stringObjectMap.get("imageId")+"\n");
//      }
//    });
     ImageSearchParams imageSearchParams=new ImageSearchParams();

      imageSearchParams.setImageId("201148136");
    imageSearchParams.setMatchedTopNum(10);
    imageSearchParams.setDistanceType("chi2");
     imageSearchParams.setPageNum(1);
     imageSearchParams.setFetchSize(100);
     String searchParams=GsonHelper.objToJson(imageSearchParams);
     System.out.print(searchParams+"\n");
     ImageSearchParams imageSearchParams1=(ImageSearchParams)GsonHelper.jsonToObj(searchParams,ImageSearchParams.class);
     VcgImageSearchService vcgImageSearchService= ServiceUtils.getVcgImageSearchService();
    Map<String,Object> finalResults= vcgImageSearchService.search(searchParams);

    System.out.print(finalResults.get("result").toString()+"\n");





  }

}
