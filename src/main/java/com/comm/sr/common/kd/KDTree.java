package com.comm.sr.common.kd;

import com.google.common.base.Stopwatch;
import com.google.common.collect.Lists;
import com.yufei.utils.FileUtil;
import org.elasticsearch.common.StopWatch;

import java.io.Serializable;
import java.util.LinkedList;
import java.util.List;
import java.util.Stack;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;

/**
 * KDTree is a class supporting KD-tree insertion, deletion, equality
 * search, range search, and nearest neighbor(s) using double-precision
 * floating-point keys.  Splitting dimension is chosen naively, by
 * depth modulo K.  Semantics are as follows:
 * <p>
 * <UL>
 * <LI> Two different keys containing identical numbers should retrieve the
 * same value from a given KD-tree.  Therefore keys are cloned when a
 * node is inserted.
 * <BR><BR>
 * <LI> As with Hashtables, values inserted into a KD-tree are <I>not</I>
 * cloned.  Modifying a value between insertion and retrieval will
 * therefore modify the value stored in the tree.
 * </UL>
 * <p>
 * Implements the Nearest Neighbor algorithm (Table 6.4) of
 * <p>
 * <PRE>
 * &*064;techreport{AndrewMooreNearestNeighbor,
 * author  = {Andrew Moore},
 * title   = {An introductory tutorial on kd-trees},
 * institution = {Robotics Institute, Carnegie Mellon University},
 * year    = {1991},
 * number  = {Technical Report No. 209, Computer Laboratory,
 * University of Cambridge},
 * address = {Pittsburgh, PA}
 * }
 * </PRE>
 * <p>
 * Copyright (C) Simon D. Levy and Bjoern Heckel 2014
 * <p>
 * This code is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 * <p>
 * This code is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * <p>
 * You should have received a copy of the GNU Lesser General Public License
 * along with this code.  If not, see <http:*www.gnu.org/licenses/>.
 * You should also have received a copy of the Parrot Parrot AR.Drone
 * Development License and Parrot AR.Drone copyright notice and disclaimer
 * and If not, see
 * <https:*projects.ardrone.org/attachments/277/ParrotLicense.txt>
 * and
 * <https:*projects.ardrone.org/attachments/278/ParrotCopyrightAndDisclaimer.txt>.
 */
public class KDTree<T> implements Serializable {
    // number of milliseconds
    final long m_timeout;

    // K = number of dimensions
    final private int m_K;

    // root of KD-tree
    private KDNode<T> m_root;

    // count of nodes
    private int m_count;

    /**
     * Creates a KD-tree with specified number of dimensions.
     *
     * @param k number of dimensions
     */

    public KDTree(int k) {
        this(k, 0);
    }

    public KDTree(int k, long timeout) {
        this.m_timeout = timeout;
        m_K = k;
        m_root = null;
    }


    /**
     * Insert a node in a KD-tree.  Uses algorithm translated from 352.ins.c of
     * <p>
     * <PRE>
     * &*064;Book{GonnetBaezaYates1991,
     * author =    {G.H. Gonnet and R. Baeza-Yates},
     * title =     {Handbook of Algorithms and Data Structures},
     * publisher = {Addison-Wesley},
     * year =      {1991}
     * }
     * </PRE>
     *
     * @param key   key for KD-tree node
     * @param value value at that key
     * @throws KeySizeException      if key.length mismatches K
     * @throws KeyDuplicateException if key already in tree
     */
    public void insert(double[] key, T value)
            throws KeySizeException, KeyDuplicateException {
        this.edit(key, new Editor.Inserter<T>(value));
    }

    /**
     * Edit a node in a KD-tree
     *
     * @param key    key for KD-tree node
     * @param editor object to edit the value at that key
     * @throws KeySizeException      if key.length mismatches K
     * @throws KeyDuplicateException if key already in tree
     */

    public void edit(double[] key, Editor<T> editor)
            throws KeySizeException, KeyDuplicateException {

        if (key.length != m_K) {
            throw new KeySizeException();
        }

        synchronized (this) {
            // the first insert has to be synchronized
            if (null == m_root) {
                m_root = KDNode.create(new HPoint(key), editor);
                m_count = m_root.deleted ? 0 : 1;
                return;
            }
        }

        m_count += KDNode.edit(new HPoint(key), editor, m_root, 0, m_K);
    }

    /**
     * Find  KD-tree node whose key is identical to key.  Uses algorithm
     * translated from 352.srch.c of Gonnet & Baeza-Yates.
     *
     * @param key key for KD-tree node
     * @return object at key, or null if not found
     * @throws KeySizeException if key.length mismatches K
     */
    public T search(double[] key) throws KeySizeException {

        if (key.length != m_K) {
            throw new KeySizeException();
        }

        KDNode<T> kd = KDNode.srch(new HPoint(key), m_root, m_K);

        return (kd == null ? null : kd.v);
    }


    public void delete(double[] key)
            throws KeySizeException, KeyMissingException {
        delete(key, false);
    }

    /**
     * Delete a node from a KD-tree.  Instead of actually deleting node and
     * rebuilding tree, marks node as deleted.  Hence, it is up to the caller
     * to rebuild the tree as needed for efficiency.
     *
     * @param key      key for KD-tree node
     * @param optional if false and node not found, throw an exception
     * @throws KeySizeException    if key.length mismatches K
     * @throws KeyMissingException if no node in tree has key
     */
    public void delete(double[] key, boolean optional)
            throws KeySizeException, KeyMissingException {

        if (key.length != m_K) {
            throw new KeySizeException();
        }
        KDNode<T> t = KDNode.srch(new HPoint(key), m_root, m_K);
        if (t == null) {
            if (optional == false) {
                throw new KeyMissingException();
            }
        } else {
            if (KDNode.del(t)) {
                m_count--;
            }
        }
    }

    /**
     * Find KD-tree node whose key is nearest neighbor to
     * key.
     *
     * @param key key for KD-tree node
     * @return object at node nearest to key, or null on failure
     * @throws KeySizeException if key.length mismatches K
     */
    public T nearest(double[] key) throws KeySizeException {

        List<T> nbrs = nearest(key, 1, null);
        return nbrs.get(0);
    }

    /**
     * Find KD-tree nodes whose keys are <i>n</i> nearest neighbors to
     * key.
     *
     * @param key key for KD-tree node
     * @param n   number of nodes to return
     * @return objects at nodes nearest to key, or null on failure
     * @throws KeySizeException if key.length mismatches K
     */
    public List<T> nearest(double[] key, int n)
            throws KeySizeException, IllegalArgumentException {
        return nearest(key, n, null);
    }

    /**
     * Find KD-tree nodes whose keys are within a given Euclidean distance of
     * a given key.
     *
     * @param key key for KD-tree node
     * @param dist   Euclidean distance
     * @return objects at nodes with distance of key, or null on failure
     * @throws KeySizeException if key.length mismatches K
     */
    public List<T> nearestEuclidean(double[] key, double dist)
            throws KeySizeException {
        return nearestDistance(key, dist, new EuclideanDistance());
    }


    /**
     * Find KD-tree nodes whose keys are within a given Hamming distance of
     * a given key.
     *
     * @param key key for KD-tree node
     * @param dist   Hamming distance
     * @return objects at nodes with distance of key, or null on failure
     * @throws KeySizeException if key.length mismatches K
     */
    public List<T> nearestHamming(double[] key, double dist)
            throws KeySizeException {

        return nearestDistance(key, dist, new HammingDistance());
    }


    /**
     * Find KD-tree nodes whose keys are <I>n</I> nearest neighbors to
     * key. Uses algorithm above.  Neighbors are returned in ascending
     * order of distance to key.
     *
     * @param key     key for KD-tree node
     * @param n       how many neighbors to find
     * @param checker an optional object to filter matches
     * @return objects at node nearest to key, or null on failure
     * @throws KeySizeException         if key.length mismatches K
     * @throws IllegalArgumentException if <I>n</I> is negative or
     *                                  exceeds tree size
     */
    public List<T> nearest(double[] key, int n, Checker<T> checker)
            throws KeySizeException, IllegalArgumentException {

        if (n <= 0) {
            return new LinkedList<T>();
        }

        NearestNeighborList<KDNode<T>> nnl = getnbrs(key, n, checker);

        n = nnl.getSize();
        Stack<T> nbrs = new Stack<T>();

        for (int i = 0; i < n; ++i) {
            KDNode<T> kd = nnl.removeHighest();
            nbrs.push(kd.v);
        }

        return nbrs;
    }


    /**
     * Range search in a KD-tree.  Uses algorithm translated from
     * 352.range.c of Gonnet & Baeza-Yates.
     *
     * @param lowk lower-bounds for key
     * @param uppk upper-bounds for key
     * @return array of Objects whose keys fall in range [lowk,uppk]
     * @throws KeySizeException on mismatch among lowk.length, uppk.length, or K
     */
    public List<T> range(double[] lowk, double[] uppk)
            throws KeySizeException {

        if (lowk.length != uppk.length) {
            throw new KeySizeException();
        } else if (lowk.length != m_K) {
            throw new KeySizeException();
        } else {
            List<KDNode<T>> found = new LinkedList<KDNode<T>>();
            KDNode.rsearch(new HPoint(lowk), new HPoint(uppk),
                    m_root, 0, m_K, found);
            List<T> o = new LinkedList<T>();
            for (KDNode<T> node : found) {
                o.add(node.v);
            }
            return o;
        }
    }

    public int size() { /* added by MSL */
        return m_count;
    }

    public String toString() {
        return m_root.toString(0);
    }

    private NearestNeighborList<KDNode<T>> getnbrs(double[] key)
            throws KeySizeException {
        return getnbrs(key, m_count, null);
    }


    private NearestNeighborList<KDNode<T>> getnbrs(double[] key, int n,
                                                   Checker<T> checker) throws KeySizeException {

        if (key.length != m_K) {
            throw new KeySizeException();
        }

        NearestNeighborList<KDNode<T>> nnl = new NearestNeighborList<KDNode<T>>(n);

        // initial call is with infinite hyper-rectangle and max distance
        HRect hr = HRect.infiniteHRect(key.length);
        double max_dist_sqd = Double.MAX_VALUE;
        HPoint keyp = new HPoint(key);

        if (m_count > 0) {
            long timeout = (this.m_timeout > 0) ?
                    (System.currentTimeMillis() + this.m_timeout) :
                    0;
            KDNode.nnbr(m_root, keyp, hr, max_dist_sqd, 0, m_K, nnl, checker, timeout);
        }

        return nnl;

    }

    private List<T> nearestDistance(double[] key, double dist,
                                    DistanceMetric metric) throws KeySizeException {

        NearestNeighborList<KDNode<T>> nnl = getnbrs(key);
        int n = nnl.getSize();
        Stack<T> nbrs = new Stack<T>();

        for (int i = 0; i < n; ++i) {
            KDNode<T> kd = nnl.removeHighest();
            HPoint p = kd.k;
            if (metric.distance(kd.k.coord, key) < dist) {
                nbrs.push(kd.v);
            }
        }

        return nbrs;
    }
public static void main(String[] args) throws Exception {
//
//        KDTree<Integer> kdTree=new KDTree<Integer>(5);
//        double[] p1={1,1,1,1,1};
//    double[] p2={1,2,3,4,5};
//    double[] p3={1,3,6,7,8};
//    kdTree.insert(p1,1);
//    kdTree.insert(p2,2);
//    kdTree.insert(p3,3);
//    double[] t1={1,0,1,7,8};
//    kdTree.nearest(t1,2).forEach(v -> System.out.println(v));
//    System.out.println(kdTree.nearest(t1));

      String path="/data/mlib_data/imageClusterCenterToGroupMappingFile_all_40_6.csv";
      List<String> lines= FileUtil.readLines(path);
      int dimension=2048;
    final KDTree<String> kdTree=new KDTree<String>(dimension);
      lines.forEach(new Consumer<String>() {
          @Override
          public void accept(String line) {
             String[] strs= line.split("@");
             String groupId=strs[0];
             String vec=strs[1].replace("[","").replace("]","");

              double[] vecs = Lists.newArrayList(vec.split(",")).parallelStream()
                      .mapToDouble(va -> Double.parseDouble(va)).toArray();

              try {
                  kdTree.insert(vecs,groupId);
              } catch (Exception e) {
                  e.printStackTrace();
              }

          }
      });
    Stopwatch stopwatch=Stopwatch.createStarted();
      String t1=
              "0.606939971447,0.318264603615,0.499899625778,0.36295452714,0.259517729282,0.303134888411,0.0606968030334,0.040965501219,0.0598296932876,0.220739915967,0.20038279891,0.217686980963,0.0664172396064,0.190664470196,0.517450153828,0.405271947384,0.0608472712338,0.195428267121,0.346056461334,0.280051916838,0.194752931595,0.0923038646579,1.29587352276,0.0361042954028,0.136566609144,0.484399169683,0.411373883486,0.0776298046112,0.210381090641,0.513007104397,0.111475974321,0.251859366894,0.249444082379,0.424152523279,0.324838638306,0.349792033434,0.0397037342191,0.70898360014,0.266585290432,0.677684783936,0.552645206451,1.29414868355,0.428475052118,0.126691639423,0.253419905901,1.01874351501,1.0614105463,0.0792848691344,0.276032835245,0.03717822209,0.279763489962,0.0839599594474,0.446228027344,0.0701553151011,0.00329134939238,0.114290133119,0.809328556061,0.203005477786,0.189302816987,1.36511421204,0.373822689056,0.0848837047815,0.0407297834754,0.364817410707,0.126209825277,0.301162749529,0.0584297217429,0.265964955091,0.226150289178,1.07151699066,0.725967407227,0.170652508736,0.556371986866,0.00931024737656,0.115875065327,0.374735087156,0.215303048491,0.124249212444,0.430301129818,0.257752835751,0.138654768467,0.0755425021052,0.145583882928,0.519225895405,0.247504264116,0.724869191647,0.580589592457,0.0401770323515,0.363888889551,0.0701941251755,0.0628969743848,0.600087702274,0.315768480301,0.069824911654,0.083029538393,0.554858624935,0.108472570777,0.486490219831,0.576303780079,0.136856734753,0.202928811312,0.132682234049,0.010869352147,0.159070461988,0.307177096605,0.0276611167938,0.226822122931,0.632260918617,0.0,0.103161416948,0.316379696131,0.342822492123,0.180408284068,0.234943851829,0.331200003624,0.0947999507189,0.0189363155514,0.171748921275,0.059674102813,0.818463087082,0.341528505087,0.312826126814,0.314725339413,1.15594744682,0.544086694717,0.222896546125,0.188076660037,0.548741102219,0.00689947651699,0.423266738653,0.554180324078,0.0627810284495,0.470350563526,0.0588802397251,0.112520523369,0.286455750465,0.103217668831,0.277207285166,0.189388394356,0.604880213737,0.576861977577,0.00835528690368,0.0575756505132,0.142144650221,0.231810569763,0.0836659222841,0.461612224579,0.483605653048,0.149117171764,0.581370830536,0.021580349654,0.460556954145,0.04253667593,0.260334551334,0.416383594275,0.0876790732145,0.166036069393,0.842937588692,0.122789591551,0.216086924076,0.303799688816,0.137277022004,0.935651779175,0.0150182424113,0.054054196924,0.15890686214,0.139493361115,0.376088827848,0.206924974918,0.264377564192,0.101398527622,0.348666399717,0.141362026334,0.702323377132,0.175034061074,0.205432385206,0.629635214806,0.193977117538,0.0739079713821,0.170969128609,0.348488032818,0.561907052994,0.295201092958,0.535383582115,0.467870920897,0.0326005071402,0.438494503498,0.0959976091981,0.382238209248,1.13498866558,0.293762415648,0.099766254425,0.39859098196,0.294807851315,0.102763071656,0.103185869753,0.684439480305,0.184239417315,0.30910679698,0.267093300819,0.307738035917,0.499542832375,0.0481550991535,0.363258928061,0.094029456377,0.728460788727,0.863164246082,0.344305485487,1.32036864758,0.035370528698,0.412491202354,0.0827876478434,0.256354004145,0.0845478922129,0.642424821854,0.0645287409425,0.271341055632,0.121768437326,0.245328560472,0.197582513094,0.395849764347,0.217515975237,0.560903251171,0.235056191683,0.273639649153,0.360840141773,0.101106084883,0.0697690919042,0.0358824618161,0.0377430766821,0.284675627947,0.584416270256,0.0234483908862,0.183823868632,0.279106587172,0.380092948675,0.00220504077151,0.462207585573,0.534715533257,0.057977385819,0.113650076091,0.153055518866,0.0150046991184,0.0773111656308,0.158157646656,0.367707908154,0.289127469063,0.181983739138,0.658327579498,0.116867333651,0.658185005188,0.258041113615,0.389185726643,0.199482813478,0.313963055611,0.089515119791,0.464689493179,0.290685772896,0.287001430988,0.0547944679856,0.660640537739,0.0451288335025,0.604026436806,0.0955821126699,0.0911294668913,0.263182729483,0.127720281482,0.657339513302,0.0972875654697,0.307451933622,0.221932172775,0.248516067863,0.228065297008,0.0855600461364,0.179720550776,1.12899327278,0.760270237923,0.161886945367,0.115106292069,0.197658225894,0.205842480063,0.362230688334,0.0554878562689,0.227167487144,1.13960087299,0.250199496746,0.0875348299742,0.370388776064,0.297822296619,0.402695536613,0.6046179533,0.485716819763,0.314340025187,0.777017116547,0.021518914029,0.0632850900292,0.137525901198,0.110218077898,0.0733948424459,0.162095084786,0.209957838058,0.104527659714,0.370144426823,0.0672690421343,0.17125377059,0.168797343969,0.64488530159,0.474012494087,0.0684995725751,0.364314436913,0.323137104511,0.125682488084,0.413108795881,0.287724256516,0.0604377351701,0.547626018524,0.692006587982,0.0720647275448,0.24788184464,0.478599846363,0.0763129144907,0.184218764305,0.0542210862041,0.24435672164,0.0284429304302,0.075279854238,0.122806757689,0.239788770676,0.0255712699145,0.0,0.343831837177,0.0484780520201,1.36460256577,0.102478593588,0.909675896168,0.284076631069,0.121190428734,0.198356896639,0.0253617670387,0.0252918973565,0.0656070932746,0.68406867981,0.0767611935735,0.164213895798,0.00441202614456,0.0698928236961,0.0287899784744,0.234298482537,0.205103248358,0.471943318844,0.338027626276,0.165832266212,0.0,0.0303712487221,0.0,0.0711212232709,0.0442852713168,0.192306414247,0.111370638013,0.0591310709715,0.0904388055205,0.619486868382,0.325163990259,0.00240698433481,0.207566514611,0.023493276909,0.149839684367,0.0112952608615,0.0168689917773,0.244555056095,0.0918795764446,0.0,0.229905873537,0.0821899548173,0.00763099547476,0.0464619062841,0.128799244761,0.309165894985,0.676347970963,0.1109790802,0.0613646954298,0.189567476511,0.0278903860599,0.25486138463,0.103569693863,0.22551061213,0.128631547093,0.133896067739,0.617666363716,0.0810877308249,0.710753023624,0.163856476545,0.0262981709093,0.15760281682,0.138530880213,0.00779489427805,0.0124047845602,0.0214192662388,0.194779127836,0.308136880398,0.0203778352588,0.228146657348,0.408601284027,0.141806423664,0.0392515733838,0.0192388109863,0.634484469891,0.446590363979,0.0421544872224,0.00531615223736,0.236639529467,0.305794119835,0.444228321314,0.231363907456,0.0474927164614,1.21211633086e-06,0.0515376366675,0.289177238941,0.322310507298,0.256485998631,0.127495571971,0.816969692707,0.0524500459433,0.119882211089,0.0223082173616,0.437076687813,0.0624138191342,0.104282550514,0.0357634909451,0.136767357588,0.134915679693,0.224219575524,0.261646360159,0.165760561824,0.11268261075,0.266312807798,0.0763194262981,0.00673965224996,0.108151435852,0.589987456799,0.00215850491077,0.00644638389349,0.424409747124,0.423327207565,0.612503170967,0.0426589623094,0.00488959811628,0.0,0.0385971218348,0.0122506134212,0.000225933268666,0.113062426448,0.209123387933,0.0865129455924,0.0954679176211,0.0229787435383,0.311739981174,0.13726785779,0.00403160229325,0.3800316751,0.0293671377003,0.394492775202,0.145777925849,0.0177314244211,0.129545420408,0.0289590954781,0.741092562675,0.0203612782061,0.0598772577941,0.072712033987,0.220129370689,0.0644901692867,0.309633463621,0.167409464717,0.0668106377125,0.00777300167829,0.402481257915,0.222415968776,0.0587401688099,0.217190161347,0.137256145477,0.096923366189,0.0475934445858,0.14542260766,0.300843507051,0.102596186101,0.0947896465659,0.228732705116,0.161619767547,0.0,0.346087783575,0.00469259126112,0.118024565279,0.0239199865609,0.169046029449,0.191797420382,0.116761893034,0.213127508759,0.0481214039028,0.525807976723,0.0966017842293,0.0115074971691,0.0656770765781,0.0272490847856,0.195394545794,0.11334284395,0.0751780644059,0.0119663309306,0.0634901225567,0.129407286644,0.0269928276539,0.0459760054946,0.100457251072,0.0428892448545,0.289437323809,0.0982328131795,0.0584709458053,0.046735689044,0.387828737497,0.459292650223,0.105254523456,0.192034214735,0.0862632021308,0.0758556574583,0.0306756496429,0.182073459029,0.252752125263,0.478855162859,0.035319827497,0.0,0.0615258179605,0.00226306868717,1.41310596466,0.199386447668,0.560479700565,0.0952396318316,0.447222173214,0.00718222698197,0.0428906455636,0.2502630651,0.154032200575,0.0021281929221,0.0423563756049,0.186139240861,0.300788551569,0.138159498572,0.781296432018,0.024744188413,0.0206676647067,0.106761455536,0.416360557079,0.0,0.646690011024,0.622458398342,0.20222055912,0.295386880636,0.057079359889,0.00491722300649,0.159893810749,0.0214744564146,0.105205126107,0.131309017539,0.0271769780666,0.17915558815,0.0301083195955,0.246203690767,0.0024677249603,0.174023255706,0.823353528976,0.0731647312641,0.0259708780795,0.278346449137,0.0158708803356,0.00241492781788,0.460644990206,0.0550154559314,0.0557664893568,0.050895627588,0.00465077999979,0.0,0.0719676762819,0.00624793954194,0.0847655162215,0.228531509638,0.254060596228,0.100520864129,0.321181535721,0.0,0.168246611953,0.129163905978,0.0544862002134,0.18143376708,0.00936337374151,0.283901184797,0.0614931024611,0.0,0.192715764046,0.664365649223,0.228160172701,0.264112114906,0.344517767429,0.0172773487866,0.548517763615,0.164416775107,0.350903570652,0.107860393822,0.0726320818067,0.0997398272157,0.047346111387,0.00895668752491,0.153045415878,0.293518543243,0.120588004589,0.174347028136,0.00870689656585,0.10094165802,0.0868141725659,0.101578265429,0.0860903486609,0.142654031515,0.0841906443238,0.105362415314,0.108715742826,0.0398845225573,0.0357148051262,0.148273199797,0.0460769832134,0.274455666542,0.0369474552572,0.204285517335,0.214263707399,0.133472517133,0.0945170596242,0.463273137808,0.657237172127,0.368794262409,0.0185710377991,0.0376584865153,0.047125659883,0.150378420949,0.00440449360758,0.0586244277656,0.258885860443,0.358054339886,0.0331997312605,0.0496465563774,0.11767783016,0.0967269092798,0.103033043444,0.206194013357,0.287434190512,0.0521814934909,0.12990142405,0.173523440957,0.272898942232,1.54052400589,0.0442126430571,0.163727983832,0.657464683056,0.234695583582,0.175198420882,0.0643772184849,0.10813164711,0.0720336213708,0.224144876003,0.170007735491,0.561120808125,0.00197645206936,0.101188473403,0.114372976124,0.0707131177187,0.0,0.0114690028131,0.205429151654,0.105271540582,0.125992700458,0.2985496521,0.0372516922653,0.0109516270459,0.462183624506,0.0137501871213,0.342910289764,0.526320576668,0.360946089029,0.0929993763566,0.0429308414459,0.0627638101578,0.165823370218,0.177295386791,0.0184001568705,0.120545938611,0.669520676136,0.034003328532,0.146775469184,0.0236085932702,0.0700496211648,0.0849611461163,0.00307568581775,0.152522847056,0.150675982237,0.0852475091815,0.174470841885,0.0,0.0310277715325,0.0906754806638,0.242412731051,0.769530117512,1.31819200516,0.214265853167,0.270019441843,0.0347063913941,0.0675401240587,0.45975446701,0.288864970207,0.09711574018,0.683661103249,0.15472638607,0.233798325062,0.169393494725,0.0825800150633,0.218743503094,0.161065861583,0.0763928294182,0.177513554692,0.175336137414,0.332350492477,0.0814680159092,0.350275188684,0.172998636961,0.238599270582,0.558447539806,0.210262805223,0.366996526718,0.408863008022,0.0577732101083,0.34631344676,0.197150707245,0.223066553473,0.118642687798,0.394583046436,0.0894633233547,0.0127663658932,0.00818187464029,0.240331292152,0.329045891762,0.0601432137191,0.0783527195454,0.217635124922,0.185597077012,0.250696629286,0.0442505888641,0.923624992371,0.091977968812,0.15446998179,0.0457445122302,0.896516084671,0.122390173376,0.0984086617827,0.00515241455287,0.0997069031,0.166890859604,0.0142901986837,0.162895470858,0.339678168297,0.00038433726877,0.106963001192,0.0,0.211358338594,0.143522053957,0.6038839221,0.0732106342912,0.0069339252077,0.159457236528,0.0633844733238,0.139491438866,0.280864626169,0.32137799263,0.0445384606719,0.0051142196171,0.30438837409,0.102856092155,0.256519049406,0.269360750914,0.135591909289,3.90848144889e-05,0.0102322231978,0.238207295537,0.151576682925,0.325455188751,0.192653417587,0.0474902763963,0.0317754819989,0.244683742523,0.0107827410102,0.251947313547,0.267707407475,0.154496595263,0.0513407625258,0.0349836759269,0.0726692155004,0.269474625587,0.0836408287287,0.174976423383,0.0432064011693,0.198516890407,0.0366140007973,0.018364796415,0.0501642264426,0.047387573868,0.258658766747,0.0,1.43901252747,0.0563282854855,0.0486601144075,0.155661150813,0.0623245500028,0.481375426054,0.136304035783,0.128453969955,0.0606620162725,0.00812465883791,0.160962432623,0.120133422315,0.0645078718662,0.475014448166,0.373896926641,0.175659269094,0.0566547214985,1.30611217022,0.123895943165,0.0277755539864,0.323009073734,0.0804489403963,0.00447371508926,0.0390092395246,0.148625925183,0.11488827318,0.160973489285,0.0981065407395,0.526422083378,0.0435291491449,0.133405283093,0.603749513626,0.0804531425238,0.0460830368102,0.160745710135,0.0276931300759,0.104309380054,0.0980601385236,0.143500775099,0.308599501848,0.401838839054,0.274040222168,0.0291566886008,0.211293876171,0.0995020717382,0.116103969514,0.196252435446,0.000193908112124,0.08311226964,0.400611251593,0.400979310274,0.0345438867807,0.0178249068558,0.026767520234,0.0521230846643,0.110280305147,0.268312901258,0.334996074438,0.0865222066641,0.210723429918,0.325056761503,0.188353925943,0.167807325721,0.10360134393,0.113627791405,0.44785246253,0.145857423544,0.69953006506,0.0219040550292,0.210546776652,0.0364773161709,0.128943651915,0.0112044401467,0.253666013479,0.855867505074,0.164851143956,0.994095027447,0.332676053047,0.0366541035473,0.121534138918,0.036926984787,0.0345804542303,0.146749138832,0.00603099027649,0.276663452387,0.187736526132,0.0424012839794,6.10812567174e-05,0.53971862793,0.138594731688,0.0131343379617,0.0464158728719,0.0615227855742,0.5003439188,0.59293192625,0.0700864121318,0.109738744795,0.021111914888,0.145785868168,0.361687928438,0.0,0.654618859291,0.133620679379,0.0171146858484,0.0479229278862,0.174079924822,0.0416930578649,0.136662214994,0.0438649877906,0.140909299254,0.424567759037,0.162557333708,0.596310138702,0.0216670837253,0.140368312597,0.182058185339,0.02289070189,0.096861243248,0.00318438978866,0.0490663461387,0.471183389425,0.291172713041,0.0241639353335,0.0351876355708,0.603058278561,0.0,0.50785690546,0.0560606010258,0.612917721272,0.402745842934,0.0576903373003,0.0292840637267,0.00474024564028,0.0196089725941,0.136322036386,0.0370571538806,0.150441378355,0.035441622138,0.122946813703,0.00917506217957,0.314292788506,0.261827558279,0.20319609344,0.934680581093,0.0288550034165,0.149183407426,0.00129122845829,0.537034928799,0.0218974724412,1.46966636181,0.273405969143,0.0932246893644,0.0603852272034,0.00960950367153,0.2257129848,0.027901949361,0.323750525713,0.0356151014566,0.365016788244,0.198731854558,0.360403418541,0.252348929644,0.115141935647,0.00705353170633,0.0145333446562,0.00276481872424,0.00448062364012,0.0444839075208,0.758071601391,0.00768455071375,0.00311962049454,0.24243478477,0.0178843159229,0.0885375142097,0.0381161794066,0.222952306271,0.0753521025181,0.334724724293,0.108574740589,0.162058800459,0.233070090413,0.0741737186909,0.247843444347,0.101373031735,0.181181073189,0.146026194096,0.0157335717231,0.127738118172,0.925141811371,0.0636356621981,0.134611770511,0.0989495441318,0.409400701523,0.0701221749187,0.315970361233,0.0803479850292,0.0374732837081,0.068019002676,0.0102487048134,0.0295515991747,0.0177673175931,0.0224224012345,0.149849772453,0.25719422102,0.0146829616278,0.142466709018,0.0430982112885,0.154545933008,0.0608696676791,0.350077539682,0.124762497842,0.0473166890442,0.0592152364552,0.160153120756,0.0559445433319,0.345402568579,0.273173421621,0.480291962624,0.426011532545,0.112727954984,0.559345006943,0.0189428832382,0.189455613494,0.195804700255,0.0622449479997,0.0440964139998,0.162264376879,0.277354329824,0.363872557878,0.0590853467584,0.238228976727,0.0164394155145,0.332130789757,0.390630871058,0.0355716496706,0.107039883733,0.081324018538,1.04230523109,0.0,0.355412244797,0.118762932718,0.0653908774257,0.0907194912434,0.0581784509122,0.0822042971849,0.15476796031,0.341082811356,0.223558723927,0.756007730961,0.302775770426,0.383449703455,0.927105784416,0.220352336764,0.22855617106,0.0937810242176,0.372026115656,0.469924092293,0.334557771683,0.400412529707,0.164883822203,0.00635663466528,0.155138686299,0.157485067844,0.0237831715494,0.693167328835,0.471928626299,0.0103395702317,0.010819228366,0.0262639317662,0.332810252905,0.890382349491,0.0420325957239,0.0,0.0535153709352,0.0405037738383,0.271309912205,0.0858173593879,0.0515697523952,0.791572928429,0.427698999643,0.536680221558,0.0563910529017,0.02337269485,0.0856449007988,0.112822465599,0.100094974041,0.236441791058,0.472459375858,0.253940463066,0.343650966883,0.101455464959,0.107344076037,0.124449521303,0.0775247737765,0.108031377196,0.207830905914,0.11088668555,0.0,0.353141307831,0.0656919330359,0.00440683588386,0.373545318842,0.178031489253,0.336133778095,0.0535035282373,0.275535792112,0.369902104139,0.0477343983948,0.0478900410235,0.120139412582,0.315485805273,0.26123970747,0.484551936388,0.917045891285,0.14153046906,0.216091901064,0.0530279241502,0.00806084740907,0.614941716194,0.130520433187,0.41381675005,0.196381658316,0.144137114286,0.0255015157163,0.630950570107,0.242875993252,0.306190282106,0.207541763783,0.0448061041534,0.357901155949,0.0546934567392,0.0135572440922,0.363161325455,0.216863840818,0.268116652966,0.284527271986,1.20875275135,0.23977856338,0.130264997482,0.192992985249,0.386640757322,0.80890673399,0.0,0.153669029474,0.108381643891,0.0686471760273,0.396411329508,0.0728926360607,0.575573921204,0.476905494928,0.0522378496826,0.423292279243,0.559045016766,0.488594025373,0.208715781569,0.200351804495,0.106684759259,0.109236657619,0.265707522631,0.132834240794,0.0470275022089,0.353540599346,0.431272149086,0.071489110589,0.113126479089,0.0791044607759,0.0260728355497,0.293753743172,0.274817198515,0.0776613205671,0.318528592587,0.125693321228,0.125168249011,0.407059043646,0.0508346930146,0.1304358989,0.0937959253788,0.0952723696828,0.128885403275,0.391080439091,0.188936710358,0.211006298661,0.310421347618,0.857904195786,0.671615183353,0.0976506099105,0.050753287971,0.0852499902248,0.166488096118,0.181578710675,0.449232041836,0.167494982481,0.0538960471749,0.356207162142,0.325044959784,0.0281225349754,0.105423100293,0.308608651161,0.0244099386036,0.0980983972549,0.00566988950595,0.0698743984103,0.0709519982338,0.488207995892,0.145460724831,0.0640404224396,0.26119056344,0.63728004694,0.321660220623,0.25304710865,0.109933398664,0.315003812313,0.0648346915841,0.307213842869,0.076671615243,0.117487505078,0.228495016694,0.0187450964004,0.101988166571,0.013918036595,0.617457389832,0.244296461344,0.0221727918833,0.119828090072,0.346762180328,0.226907238364,0.0154723171145,0.105091050267,0.0363776609302,0.101691357791,0.459893941879,0.0298694837838,0.119428128004,0.351496100426,0.397337704897,0.241480588913,0.0520414300263,0.0141087248921,0.200931996107,0.0471290573478,0.00336554413661,0.0274502597749,0.0758912414312,0.141750946641,0.801890969276,0.231452777982,0.381763577461,0.669357120991,0.168228417635,0.0802637860179,0.154948815703,0.212864667177,0.429644942284,0.0430353432894,0.138941973448,0.154439017177,0.432647824287,0.0347406603396,0.0516090616584,0.0659154132009,0.271586865187,0.105695657432,0.497719615698,0.0859866440296,0.0142215117812,0.287969380617,0.412702560425,0.10623241961,0.10061416775,0.0182051174343,0.349520355463,0.0327870957553,0.830160796642,0.0245410837233,0.260895162821,0.0366552695632,0.43266159296,0.129929676652,0.75596088171,0.531845510006,0.102896645665,0.278580307961,0.0785167589784,0.186364069581,0.50964486599,0.235713928938,0.345861136913,0.00990496668965,0.0585728436708,0.0944016054273,0.300833195448,0.431874126196,0.0848371759057,0.201415121555,0.0511029921472,0.476215094328,0.0241060797125,0.057926658541,0.140394866467,0.0678884759545,0.416666418314,0.452804684639,1.05696380138,0.0771214812994,0.225651353598,0.00816296227276,0.0796347931027,0.331429868937,0.063886217773,0.154408589005,0.27273362875,0.154387056828,0.186464309692,0.0437134280801,0.341754704714,0.543950796127,0.355141937733,0.254247546196,0.592788219452,0.0372504889965,0.176311820745,0.465520441532,0.224496394396,0.0973919034004,0.0537199415267,0.0341434180737,0.428140044212,0.202606290579,0.171920791268,0.100872024894,1.54546964169,0.097012154758,0.593213379383,0.924642980099,0.140560731292,0.0243973359466,0.0276418849826,0.30504116416,0.064716078341,0.0810475796461,0.524789810181,0.165637582541,0.227548614144,0.352746903896,0.13609392941,0.156746119261,0.0246537700295,0.101638533175,0.144870609045,0.456152170897,0.272047549486,0.227119132876,0.0087618175894,0.729064106941,0.286927849054,0.430319577456,0.0457400269806,0.644560337067,0.735351204872,0.466995120049,0.0458052903414,0.00286238570698,0.172935143113,0.308082967997,0.0481917448342,0.370732545853,0.339221805334,0.12172999233,0.125067561865,0.104285404086,0.16432711482,0.252017438412,0.0994702205062,0.0161313526332,0.391515880823,0.582799494267,0.10821928829,0.0441972501576,0.217003956437,0.0326379686594,0.15792517364,0.117541462183,0.0670897141099,0.400677353144,0.194218337536,0.213708728552,0.355231374502,0.336573034525,0.24982394278,0.0770628154278,0.670477151871,0.0476893112063,0.146745473146,0.23367010057,0.322916179895,0.146908983588,0.486900478601,0.0544344931841,0.0697813183069,0.659609794617,0.583370566368,0.120872810483,0.0317538678646,0.457802146673,0.147950738668,0.0488561019301,0.155817314982,0.124920591712,0.372011184692,0.0846887007356,0.0831158831716,0.0829338952899,0.0170236323029,0.0805059224367,0.47617945075,0.010037866421,0.99536293745,0.0590477697551,0.123389452696,0.996992051601,0.170383453369,0.033456556499,0.336254626513,0.00661176769063,0.238309726119,0.296722024679,0.151101201773,0.41091799736,0.123730219901,0.137840777636,0.0621844306588,0.386261314154,0.566969931126,0.609129846096,0.425151020288,0.159087121487,0.0766563788056,0.146791830659,0.55138784647,0.00228741881438,0.112452402711,0.0574637204409,0.05279635638,0.0546026863158,0.626791775227,0.343992382288,0.396039396524,0.297866612673,0.208984717727,0.398698449135,0.226677983999,0.0230978280306,0.00370119861327,0.965760648251,0.664610743523,0.145798742771,0.320225507021,0.159248277545,0.0347738228738,0.522916555405,0.0906930342317,0.152235135436,0.0159040354192,0.0403359644115,0.599586069584,1.06763279438,0.359811723232,0.0900723263621,0.154913380742,0.259632647038,0.368797063828,0.113003537059,0.353155851364,0.484076678753,0.688301086426,0.17650668323,0.265776962042,0.0546946823597,0.627920329571,0.814032375813,0.0275680720806,0.0286707654595,0.326883614063,0.0877175107598,0.437462210655,0.186995029449,0.368290871382,0.467751979828,0.20254920423,0.0854963064194,0.0204432345927,0.0924096480012,0.585607886314,0.0763004049659,0.0792094171047,0.503397166729,0.203275278211,0.242080762982,0.160968005657,0.644444167614,0.592314183712,0.0584939569235,0.0125532317907,0.654212772846,0.11116437614,0.515466034412,0.154982566833,0.25524225831,0.30706718564,0.0159760192037,0.55018222332,0.596850097179,0.0669072940946,0.0201643649489,0.788713276386,0.0926791504025,0.0748112872243,0.0432239621878,0.312949538231,0.0431709736586,0.195090770721,0.859936177731,0.0365058667958,0.305610746145,0.564175784588,0.0296751558781,0.0645166933537,0.0377468243241,0.168669462204,0.278565436602,0.144934669137,0.323657900095,0.0732840448618,0.170549407601,0.192053616047,0.127434551716,0.43822491169,0.751880705357,0.717039644718,0.281377583742,0.0246556364,0.22662512958,0.100680924952,0.0149153200909,0.174367293715,0.318585515022,0.00679040746763,0.017882777378,0.487721979618,0.105713643134,0.394652575254,0.0463148057461,0.0620901435614,0.212342724204,0.336624830961,0.075471997261,0.205329105258,0.38285368681,0.110296800733,0.0671677067876,0.106653645635,0.0177558735013,0.0201207641512,0.0793514102697,0.193245962262,0.28263053298,0.110109046102,0.0455552972853,0.0143136978149,0.0372061803937,0.125051632524,0.306492030621,0.0882801041007,0.77275544405,0.0542380511761,0.0768093988299,0.0428474582732,0.0905160158873,0.929334938526,1.46481788158,0.199132815003,0.110856540501,0.175897777081,0.0,0.615505278111,0.143277302384,0.407609164715,0.107227399945,0.213204860687,0.332691431046,0.186825171113,0.151815623045,0.497079312801,0.183304533362,0.333612561226,0.35714250803,0.208304941654,0.0475574173033,0.189718991518,0.233079522848,0.175446361303,0.508446991444,0.109646089375,0.30083501339,0.287279158831,1.24703884125,0.107194140553,0.151310414076,0.0387042164803,0.27586042881,0.384966731071,0.41715708375,0.0711136832833,0.0488883703947,0.254426389933,0.392220795155,0.10503976047,0.211765944958,0.508588552475,1.33771622181,0.344649255276,0.119850918651,0.558178067207,0.968536794186,0.0220756232738,0.0785242840648,0.123253397644,0.00814816076308,0.0225457008928,0.429803997278,0.498815000057,0.268455922604,0.304482102394,0.0301332715899,0.176960885525,0.558014571667,0.0647016316652,0.332336127758,0.246843054891,0.371842354536,0.202765092254,0.308887839317,0.286539822817,0.205361530185,0.123360037804,0.560123026371,0.745041131973,0.0493534617126,0.0292131174356,0.213997423649,0.470370560884,0.343643039465,0.348695337772,0.231295973063,0.139772459865,0.254429996014,0.0547747761011,0.19652813673,1.02390861511,0.617424190044,0.281010478735,0.258533746004,0.0580248720944,0.0282391253859,0.0784933790565,0.327431976795,0.872317969799,0.264051795006,0.0610208511353,0.00496505852789,0.00433028675616,0.299976110458,0.0361549705267,0.0562144070864,0.0976148173213,0.102709427476,0.249123960733,0.156844854355,0.410472840071,0.779573321342,0.0721908435225,0.595870018005,0.128241226077,0.0532635077834,0.115728765726,0.0474225245416,0.113359890878,0.321190983057,0.0739964544773,0.189362481236,0.624608278275,0.140465334058,0.0318558141589,0.248375803232,0.456468015909,1.42155015469,0.517939805984,0.00441636191681,0.268301576376,0.0829161182046,0.113400764763,0.853567361832,0.290059894323,0.190690025687,0.171498522162,0.479697853327,0.340701311827,0.265765875578,0.124181114137,0.342285245657,0.365951180458,0.0810039788485,0.0958662629128,0.347735881805,0.181630447507,0.286680579185,0.408288091421,0.0103591885418,0.136633366346,0.148553669453,0.0207487884909,0.441416293383,0.168553501368,0.437447428703,0.308873355389,0.398350536823,0.319901823997,0.235604405403,0.153604492545,0.0401198863983,0.130757004023,0.0778178423643,0.207970455289,0.286718428135,0.304848015308,0.32129663229,0.145942494273,0.520014286041,0.259977519512,0.331077128649,0.464109510183,0.203184470534,0.119608364999,0.0977111980319,0.283201247454,0.306003004313,0.224166274071,0.0102813541889,0.22895359993,0.349070370197,0.201929807663,0.389322131872,0.234577268362,0.0247415862978,0.423446565866,0.0220448188484,0.00427493546158,0.309242933989,0.215914204717,0.0461854636669,0.177598789334,0.0225393269211,0.672495961189,0.62594050169,0.116845093668,0.227165982127,0.405499607325,0.854145944118,0.0474797002971,1.24682283401,0.211090132594,0.0250731166452,0.696618020535,0.218876868486,0.480971485376,0.559420406818,0.156501218677,0.153906077147,0.0895404964685,0.577153503895,0.782877027988,0.109522946179,0.0903886556625,0.225823551416,0.0286465138197,0.55649381876,0.0581989735365,0.0173034612089,0.814077615738,0.372294336557,0.117830656469,0.31084394455,1.21013700962,0.188797354698,0.224817946553,0.261880159378,0.320064932108,0.0714387893677,0.0641843900084,0.188566714525,0.221557095647,0.145891010761,0.0585179924965,0.118562214077,0.111115701497,0.41043639183,0.108710773289,0.693470478058,0.600327372551,0.0945885628462,0.184880137444,0.550027132034,0.0828143134713,0.351323395967,0.800508797169,0.232720032334,0.133604764938,0.0619606040418,0.0832711458206,0.006800936535,0.117967523634,0.0874050408602,0.247171327472,0.0863992497325,0.0680744796991,0.582580626011,0.346546411514,0.133122086525,0.370542526245,0.0658115968108,0.195122033358,0.15025793016,0.0829291939735,0.259461611509,0.140860304236,0.0900132581592,0.398303687572,0.0865692198277,0.0197123102844,0.427695095539,0.311632752419,0.363516241312,0.153411433101,0.0584063008428,0.15454415977,0.137667402625,0.332348227501,0.0161855146289,0.536466777325,0.910787642002,0.330295413733,0.26495462656,0.257198125124,0.218431279063,0.166015297174,0.0148676643148,0.453715145588,0.103784896433,0.248719722033,0.130143299699,0.31290063262,0.388463139534,0.0188271235675,0.608726501465,0.0278732329607,0.101202875376,0.297628462315,0.870403528214,0.162971317768,0.101622752845,0.211767107248,0.0106266140938,0.734901309013,0.476752758026,0.195635259151,0.363482385874,0.538762152195,0.661393105984,0.264430850744,0.0124771278352,0.109409868717,0.0579464361072,0.338791459799,0.309416085482,0.48119160533,0.854903638363,0.0,0.551415681839,0.431645393372,0.384576648474,0.15077227354,0.139326274395,0.315145492554,0.390104562044,0.0689129978418,0.551870763302,0.247170552611,1.00502753258,0.0126077020541,0.108367301524,0.668372809887,0.171565011144,0.177376776934,0.860743403435,0.439468502998,0.109937869012,0.189200848341,0.0335033349693,0.331235349178,0.385028779507,0.317956000566,0.0922544822097,0.286044597626,0.139109060168,0.0740868449211,0.17723852396,0.00792156532407,0.270992040634,0.0375979281962,0.164724633098,0.157924741507,0.198101192713,0.442643046379,0.256563574076,0.120315119624,1.19940268993,0.0629767253995,0.242110550404,0.207692205906,1.08029651642,0.291676074266,0.381614029408,1.01090967655,0.397913843393,0.465965002775,0.461538612843,0.603359341621,0.0530325472355,0.269599169493,0.515859186649,0.324347198009,0.0230335555971,0.0552015081048,0.0313248448074,1.7167327404,0.462269514799,0.508929669857,0.192894607782,0.0443794429302,0.872501313686,0.0346008948982,0.0389007143676,0.126676887274,1.12798762321,0.0312254689634,0.824972271919,0.025264210999,0.0332416668534,0.0283894576132,0.0667867511511,0.335274666548,0.49494060874,0.248531490564,0.720252990723,0.495254486799,0.990099847317,0.30944621563,0.317901998758,0.0139369405806,0.00971047300845,0.734142780304,0.00640900852159,0.0764655992389,1.05644929409,0.954558372498,0.568693041801,0.376546770334,0.816508114338,0.0,0.128387853503,0.0351860001683,0.74338978529,0.460873901844,1.1516058445,0.0326546393335,0.358463972807,0.0,0.0598744601011,0.65555202961,0.0201340951025,0.107473999262,0.101809151471,0.390610635281,0.127526670694,0.105542846024,1.0233604908,0.213812857866,0.0306327585131,0.0652492791414,0.517335534096,0.528204083443,0.0580075643957,0.133244588971,0.00945142563432,0.166282981634,0.000793455517851,0.847308158875,0.00134503352456,0.44723829627,0.556151866913,0.31613394618,0.27262070775,0.175295159221,0.443493813276,0.843936562538,0.00800363253802,0.355097353458,0.270700484514,1.00653469563,0.0663002431393,0.268856853247,0.0337447486818,0.471890002489,0.32770422101,0.0472549088299,0.159839376807,0.371989488602,1.01150393486,0.0235194601119,0.426174283028,0.0739035457373,0.0133657567203,0.156675159931,0.861147284508,0.375408798456,0.823962211609,0.0964014679193";
      double[] t1s=Lists.newArrayList(t1.split(",")).parallelStream()
              .mapToDouble(va -> Double.parseDouble(va)).toArray();

    System.out.println(kdTree.nearest(t1s));
    stopwatch.stop();
    System.out.println(stopwatch.elapsed(TimeUnit.MILLISECONDS));
    kdTree.nearest(t1s,5).forEach(v -> System.out.println(v));






}

}

